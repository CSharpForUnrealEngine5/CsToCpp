namespace GameFramework;
using CSharpToCpp.Utilities;
///<summary>ForceFeedbackComponent allows placing a rumble effect in to the world and having it apply to player characters who come near it</summary>
[CppInclude("Components/ForceFeedbackComponent.h")]
public partial class UForceFeedbackComponent : USceneComponent {
	public static UClass StaticClass() {return default;}
	///<summary>The feedback effect to be played</summary>
	public UForceFeedbackEffect ForceFeedbackEffect;
	///<summary>Auto destroy this component on completion</summary>
	public bool bAutoDestroy;
	///<summary>Stop effect when owner is destroyed</summary>
	public bool bStopWhenOwnerDestroyed;
	///<summary>bLooping</summary>
	public bool bLooping;
	///<summary>Should the playback of the forcefeedback pattern ignore time dilation and use the app&#39;s delta time</summary>
	public bool bIgnoreTimeDilation;
	///<summary>Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties</summary>
	public bool bOverrideAttenuation;
	///<summary>The intensity multiplier to apply to effects generated by this component</summary>
	public float IntensityMultiplier;
	///<summary>If bOverrideSettings is false, the asset to use to determine attenuation properties for effects generated by this component</summary>
	public UForceFeedbackAttenuation AttenuationSettings;
	///<summary>If bOverrideSettings is true, the attenuation properties to use for effects generated by this component</summary>
	public FForceFeedbackAttenuationSettings AttenuationOverrides;
	///<summary>called when we finish playing audio, either because it played to completion or because a Stop() call turned it off early</summary>
	public FOnForceFeedbackFinished OnForceFeedbackFinished;
	///<summary>Set what force feedback effect is played by this component</summary>
	public void SetForceFeedbackEffect(UForceFeedbackEffect NewForceFeedbackEffect) {}
	///<summary>Start a feedback effect playing</summary>
	public virtual void Play(float StartTime/*=0.0f*/) {}
	///<summary>Stop playing the feedback effect</summary>
	public virtual void Stop() {}
	///<summary>Set a new intensity multiplier</summary>
	public void SetIntensityMultiplier(float NewIntensityMultiplier) {}
	///<summary>Modify the attenuation settings of the component</summary>
	public void AdjustAttenuation(FForceFeedbackAttenuationSettings InAttenuationSettings) {}
	///<summary>BP_GetAttenuationSettingsToApply</summary>
	public bool BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings OutAttenuationSettings) { return default; }
}
