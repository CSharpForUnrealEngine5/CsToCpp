namespace GameFramework;
using CSharpToCpp.Utilities;
[CppInclude("EnvironmentQuery/EnvQueryInstanceBlueprintWrapper.h")]
public partial class UEnvQueryInstanceBlueprintWrapper : UObject {
	public static UClass StaticClass() {return default;}
	///<summary>FEQSQueryDoneSignature</summary>
	public void FEQSQueryDoneSignature(UEnvQueryInstanceBlueprintWrapper QueryInstance,EEnvQueryStatus QueryStatus) {}
	///<summary>QueryID</summary>
	public int QueryID;
	///<summary>ItemType</summary>
	public UClass ItemType;
	///<summary>index of query option, that generated items</summary>
	public int OptionIndex;
	///<summary>OnQueryFinishedEvent</summary>
	public FEQSQueryDoneSignature OnQueryFinishedEvent;
	///<summary>GetItemScore</summary>
	public float GetItemScore(int ItemIndex) { return default; }
	///<summary>Outputs an array filled with resulting actors.  Note that it makes sense only if ItemType is a EnvQueryItemType_ActorBase-derived type.  Returns false if there is no valid result.</summary>
	public bool GetQueryResultsAsActors(TArray<AActor> ResultActors) { return default; }
	///<summary>Outputs an array of locations generated by the query. If the query generated Actors the the array is filled with their locations.  Returns false if there is no valid result.</summary>
	public bool GetQueryResultsAsLocations(TArray<FVector> ResultLocations) { return default; }
	///<summary>DEPRECATED!  Use GetQueryResultsAsActors instead.  Returns an array filled with resulting actors. Note that it makes sense only if ItemType is a EnvQueryItemType_ActorBase-derived type.</summary>
	public TArray<AActor> GetResultsAsActors() { return default; }
	///<summary>DEPRECATED!  Use GetQueryResultsAsLocations instead.  Returns an array of locations generated by the query. If the query generated Actors the the array is filled with their locations.</summary>
	public TArray<FVector> GetResultsAsLocations() { return default; }
	///<summary>SetNamedParam</summary>
	public void SetNamedParam(FName ParamName,float Value) {}
}
